#!/usr/bin/env php
<?php
	declare(strict_types=1);

	use AoC\Result;
	use Cruxoft\Dump\StructureItem;

	ini_set("memory_limit", "256M");

	const ROOT = __DIR__ . "/../";

	require_once(ROOT . "bin/init.php");

	// ./bin/run --day 1 --override example --verbose
	// ./bin/run --day 1 --override example --verbose --time
	// ./bin/run -d=1 -o=example -v
	// ./bin/run -a

	class Runner
	{
		public array $helpers = [];

		public function __construct()
		{
			$config = json_decode(file_get_contents(ROOT . "bin/config.json"));

			foreach ($config as $next)
			{
				$this->helpers[$next->day] = "App\\" . $next->class;
			}
		}

		public function run(int $day, bool $verbose = false, bool $timed = true, ?string $override = null): object
		{
			if ($timed)
			{
				$start = hrtime(true);
				memory_reset_peak_usage();
			}

			$helper = (new $this->helpers[$day](
				$day,
				$verbose,
				isset($override) ? ROOT . "data/" . str_pad((string)$day, 2, "0", STR_PAD_LEFT) . "/" . $override : null
			));

			/** @var Result $result */
			$result = $helper->run();

			$end = hrtime(true);

			$return = [
				"Day" => $day,
				"Name" => $helper->name(),
				"Part 1" => $result->part1,
				"Part 2" => $result->part2,
			];

			if ($timed)
			{
				$executionTime = $end - $start;
				$return['Time'] = $this->humanReadableTime($executionTime);
				$return['Memory'] = round(memory_get_peak_usage()/pow(2, 20), 4) . " MiB";
			}

			return (object)$return;
		}

		public function all(): void
		{
			$results = [];

			foreach ($this->helpers as $day => $class)
			{
				echo("Running day " . $day . "...\r");
				$result = $this->run($day);

				$results[] = $result;
			}

			$this->display($results);
		}

		public function single(int $day, bool $verbose = false, bool $timed = false, ?string $override = null): void
		{
			if (!isset($this->helpers[$day]))
			{
				throw new Exception("Day " . $day . " missing from config");
			}

			$result = $this->run($day, $verbose, $timed, $override);

			$this->display([$result]);
		}

		private function display(array $data): void
		{
			$tmp = new StructureItem($data);

			$rows = $tmp->children;

			$headers = [];
			$sizes = [];

			foreach ($rows[0]->children as $key => $value)
			{
				$headers[] = $key;
				$sizes[$key] = mb_strlen($key);
			}

			foreach ($rows as $row)
			{
				foreach ($headers as $header)
				{
					$sizes[$header] = max($sizes[$header], strlen((string)$row->children[$header]->value));
				}
			}

			$parts = [];

			foreach ($headers as $header)
			{
				$parts[] = str_pad($header, $sizes[$header], " ", STR_PAD_BOTH);
			}

			$output = array_map(
				function ($size)
				{
					return str_repeat("─", $size + 2);
				},
				$sizes
			);

			echo(" ┌" . implode("┬", $output) . "┐ " . PHP_EOL);
			echo(" │ " . implode(" │ ", $parts) . " │ " . PHP_EOL);
			echo(" ├" . implode("┼", $output) . "┤ " . PHP_EOL);

			foreach ($rows as $row)
			{
				$parts = [];

				foreach ($headers as $header)
				{
					$value = (string)$row->children[$header]->value;
					$adjustment = strlen($value) - mb_strlen($value);
					$pad = is_string($row->children[$header]->value) ? STR_PAD_RIGHT : STR_PAD_LEFT;
					$parts[] = str_pad($value, $sizes[$header] + $adjustment, " ", $pad);
				}

				echo(" │ " . implode(" │ ", $parts) . " │ " . PHP_EOL);
			}

			echo(" └" . implode("┴", $output) . "┘ " . PHP_EOL);
		}

		private function humanReadableTime(float $count, int $level = 0, int $decimalPlaces = 4): string
		{
			if ($count >= 1000 && $level <=3)
			{
				return $this->humanReadableTime(($count / 1000), ($level + 1));
			}

			$result = round($count, $decimalPlaces);

			$unit = match ($level)
			{
				0 => "ns",
				1 => "μs",
				2 => "ms",
				3 => "s"
			};

			return $result . $unit;
		}
	}

	$options = getopt("d:o:vta", ["day:", "override:", "verbose", "time", "all"]);

	$day = (int)($options['day'] ?? $options['d'] ?? null);
	$override = $options['override'] ?? $options['o'] ?? null;
	$verbose = isset($options['verbose']) || isset($options['v']);
	$time = isset($options['time']) || isset($options['t']);
	$all = isset($options['all']) || isset($options['a']);

	$runner = new Runner();

	if ($all)
	{
		$runner->all();
	}
	else
	{
		$runner->single($day, $verbose, $time, $override);
	}
?>
